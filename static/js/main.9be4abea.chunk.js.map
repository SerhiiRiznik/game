{"version":3,"sources":["selectors.ts","reducers/gameReducer.ts","components/Statistics.jsx","components/AboutTest.tsx","components/Results.tsx","components/Game.tsx","components/Header.tsx","components/BestResult.tsx","components/Footer.tsx","App.tsx","reportWebVitals.ts","reducers/store.ts","index.tsx"],"names":["getMinResults","state","Math","min","gameReducer","result","results","convertTime","e","pad","num","size","slice","time","parseFloat","toFixed","minutes","floor","seconds","milliseconds","initialState","name","started","step","firstClick","secondClick","background","info","message","showMessage","currentResult","bestResult","showResult","test","idSetTimeout","setMessageAC","arg","type","payload","setBackground","showMessageAC","showResultAC","data","x","y","Statistics","props","number","i","push","style","height","maxWidth","width","className","tickFormat","v","tickLabelAngle","position","hideLine","tickValues","curve","color","AboutTest","Results","minWidth","map","index","res","Game","React","memo","isStarted","startGame","stopGame","getBestResult","resetGame","setName","saveScore","useState","count","setCount","onClick","focusable","role","xmlns","viewBox","fill","d","length","placeholder","value","onChange","target","connector","connect","dispatch","max","setTimeout","Date","getTime","ceil","random","getState","clearTimeout","setNextStepAC","setResultGameAC","setBestResultGameAC","console","log","setNamegAC","localStorage","setItem","withCookies","Header","to","activeClassName","BestResult","items","scope","Object","entries","convertVal","Footer","href","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","CookiesProvider","document","getElementById"],"mappings":"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","file":"static/js/main.9be4abea.chunk.js","sourcesContent":["import { RootState } from './reducers/store';\r\n\r\nexport function getMinResults(state:RootState) {\r\n  // @ts-ignore\r\n  return Math.min(...state.gameReducer.result.results)\r\n}\r\n\r\n\r\n\r\n\r\nexport function convertTime(e:any) {\r\n   e = e /  1000;\r\n   let pad = function(num:number, size:number) { return ('000' + num).slice(size * -1); }\r\n   let time:any = parseFloat(e).toFixed(3) \r\n   let minutes:any = Math.floor((time) / 60) % 60\r\n   let seconds:any = Math.floor(time - minutes * 60)\r\n   let milliseconds:any = time.slice(-3)\r\n   return  pad(minutes, 2)+':' +pad(seconds, 2)+\":\" + pad(milliseconds, 3)\r\n}\r\n\r\n\r\n\r\n// export const useDidMountEffect = (func:any, deps:any) => {\r\n//     const didMount = useRef(false);\r\n\r\n//     useEffect(() => {\r\n//         if (didMount.current) func();\r\n//         else didMount.current = true;\r\n//     }, deps);\r\n// }\r\n\r\n\r\nexport const getRandomInt=(min:number, max:number)=> {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(Math.random() * (max - min) + min )\r\n}","import { getRandomInt } from './../selectors';\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { getMinResults } from \"../selectors\"\r\nimport { AppDispatch, RootState } from \"./store\"\r\n\r\nconst initialState = {\r\n  name: '',\r\n  started: false,\r\n  step: 0,\r\n  \r\n  firstClick:0,\r\n  secondClick:0,\r\n  background: 'stoped',\r\n  info:{\r\n    message: 'safdasdsad',\r\n    showMessage: false,\r\n  },\r\n  result: {\r\n    currentResult: null,\r\n    results:[] as string[],\r\n    bestResult: 0,\r\n    showResult:false,\r\n    test:[] as any\r\n  }\r\n  \r\n}\r\n\r\nexport default function gameReducer(state = initialState, action:ActionType): typeof initialState {\r\n  switch (action.type) {\r\n    case 'GAME/START':\r\n      return {\r\n        ...state,started: true\r\n      }\r\n    case 'GAME/STOP':\r\n      return {\r\n        ...state,\r\n        started: false\r\n      }\r\n    case 'GAME/AND':\r\n      return {\r\n        ...state,\r\n        started: false,\r\n      }\r\n    case 'GAME/RESET':\r\n    return {\r\n      ...state,\r\n      name: '',\r\n      started: false,\r\n      step: 0,\r\n      info:{\r\n        message: '',\r\n        showMessage: false,\r\n      },\r\n      result: {\r\n        currentResult: null,\r\n        results:[],\r\n        bestResult: 0,\r\n        showResult: false,\r\n        test: state.result.test\r\n      }\r\n    }\r\n    case 'GAME/NEXT_STEP':\r\n      return {\r\n        ...state,\r\n        step: ++state.step\r\n      }\r\n    case 'GAME/SET_NAME':\r\n      return {\r\n        ...state,\r\n        name: action.payload\r\n      }\r\n    case 'GAME/SET_MESSAGE':\r\n      return {\r\n        ...state,\r\n        info: {\r\n          ...state.info,\r\n          message: action.payload\r\n        }\r\n      }\r\n    case 'GAME/SET_FIRST_CLICK':\r\n      return {\r\n        ...state,\r\n        firstClick: action.payload\r\n      }\r\n    case 'GAME/SET_SECOND_CLICK':\r\n      return {\r\n        ...state,\r\n        secondClick: action.payload\r\n      }\r\n    case 'GAME/SET_BACKGROUND':\r\n      return {\r\n        ...state,\r\n        background: action.payload\r\n      }\r\n    case 'GAME/ADD_RESULT':\r\n      {\r\n        // const item = action.item;\r\n        // const changedValues = {\r\n        //   ...state.result.test,\r\n        //   [item.id]: item,\r\n        // };\r\n        return {\r\n          ...state,\r\n          result: {\r\n            ...state.result,\r\n            currentResult: action.payload,\r\n            results: [\r\n              ...state.result.results, action.payload\r\n            ],\r\n            // test: [\r\n            //   ...state.result.test,\r\n            //   {\r\n            //     x:action.payload , y: 12\r\n            //   }\r\n            // ]\r\n            test: [\r\n              ...state.result.test,\r\n                action.payload\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case 'GAME/ADD_BEST_RESULT':\r\n      return {\r\n        ...state,\r\n        result: {\r\n          ...state.result,\r\n          bestResult: action.payload\r\n        }\r\n      }\r\n    case 'GAME/SHOW_MESSAGE':\r\n      return {\r\n        ...state,\r\n        info:{\r\n          ...state.info,\r\n          showMessage: action.payload,\r\n        },\r\n      }\r\n    case 'GAME/SHOW_RESULT':\r\n      return {\r\n        ...state,\r\n        result: {\r\n          ...state.result,\r\n          showResult:action.payload,\r\n        }\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\ntype ActionType = any\r\n// ACTIONS\r\nconst startGameAC = ()=>({type: 'GAME/START'})\r\nconst stopGameAC = ()=> ({type: 'GAME/STOP'})\r\nconst ResetGameAC = ()=> ({type: 'GAME/RESET'})\r\nconst setResultGameAC = (arg:number | null)=> ({type: 'GAME/ADD_RESULT',payload: arg})\r\nconst setBestResultGameAC = (arg:number)=> ({type: 'GAME/ADD_BEST_RESULT',payload: arg})\r\nconst setNamegAC = (arg:string)=> ({type: 'GAME/SET_NAME',payload: arg})\r\nconst setMessageAC = (arg:string)=> ({type: 'GAME/SET_MESSAGE',payload: arg})\r\nconst setNextStepAC = (arg:number)=> ({type: 'GAME/NEXT_STEP',payload: arg})\r\nconst setFirstClickAC = (arg:number)=>({type:'GAME/SET_FIRST_CLICK',payload: arg})\r\nconst setSecondClickAC = (arg:number)=>({type:'GAME/SET_SECOND_CLICK',payload: arg})\r\nconst setBackground = (arg:string)=>({type:'GAME/SET_BACKGROUND',payload: arg})\r\nconst showMessageAC = (arg:boolean)=> ({type: 'GAME/SHOW_MESSAGE',payload: arg})\r\nconst showResultAC = (arg:boolean)=> ({type: 'GAME/SHOW_RESULT',payload: arg})\r\n\r\n\r\n// THUNK \r\ntype ThunkType = ThunkAction<void, RootState, unknown, ActionType>\r\nlet idSetTimeout: NodeJS.Timeout\r\nexport const startGame = ():ThunkType=>{\r\n  return (dispatch:any, state:any)=>{\r\n\r\n    idSetTimeout = setTimeout(()=>{\r\n      const d = new Date().getTime()\r\n      dispatch(setFirstClickAC(d))\r\n      dispatch(setBackground('started'))\r\n    },getRandomInt(1500,6000))\r\n    dispatch(startGameAC())\r\n  }\r\n}\r\nexport const stopGame = ():ThunkType=>{\r\n  return (dispatch:AppDispatch, getState:any)=>{\r\n    let state = getState()\r\n\r\n    if (state.gameReducer.background === 'stoped') {\r\n      dispatch(showResultAC(false))\r\n      dispatch(setMessageAC('Too soon!'))\r\n      dispatch(stopGameAC())\r\n      clearTimeout(idSetTimeout)\r\n      dispatch(showMessageAC(true))\r\n    } else {\r\n      const d =  new Date().getTime()\r\n      dispatch(setBackground('stoped'))\r\n      dispatch(setSecondClickAC(d))\r\n      dispatch(setNextStepAC(++state.gameReducer.step))\r\n      dispatch(setMessageAC(''))\r\n      dispatch(stopGameAC())\r\n      state = getState()\r\n      dispatch(setResultGameAC(state.gameReducer.secondClick - state.gameReducer.firstClick))\r\n      dispatch(setBestResultGameAC(getMinResults(state)))\r\n      dispatch(showResultAC(true))\r\n    }\r\n  }\r\n}\r\nexport const resetGame = ():ThunkType=>{\r\n  return (dispatch:any, getState:any)=>{\r\n    dispatch(ResetGameAC())\r\n  }\r\n}\r\nexport const setName = (arg:string):ThunkType=>{\r\n  return (dispatch:any, getState:any)=>{\r\n    console.log(arg);\r\n    dispatch(setNamegAC(arg))\r\n  }\r\n}\r\nexport const saveScore = (arg:any):ThunkType=>{\r\n  return (dispatch:any, getState:any)=>{\r\n    let state = getState()\r\n    if (state.gameReducer.name) {\r\n      localStorage.setItem(state.gameReducer.name, state.gameReducer.result.bestResult)\r\n      dispatch(showMessageAC(true))\r\n      dispatch(setMessageAC('Your best reaction save to localStorege'))\r\n    } else {\r\n      dispatch(showMessageAC(true))\r\n      dispatch(setMessageAC('Enter your Name'))\r\n    }\r\n  }\r\n}\r\n","\r\nimport React from 'react';\r\nimport '../../node_modules/react-vis/dist/style.css'\r\nimport {FlexibleWidthXYPlot, XAxis, LineSeries} from 'react-vis';\r\nconst data = [\r\n      {x: 0, y: 0},\r\n      {x: 25, y: 0},\r\n      {x: 50, y: 0},\r\n      {x: 75, y: 0.2},\r\n      {x: 100, y: 0.4},\r\n      {x: 125, y: 1.5},\r\n      {x: 150, y: 6},\r\n      {x: 175, y: 15},\r\n      {x: 200, y: 19},\r\n      {x: 225, y: 18},\r\n      {x: 250, y: 13},\r\n      {x: 275, y: 7},\r\n      {x: 300, y: 3.4},\r\n      {x: 325, y: 2.4},\r\n      {x: 350, y: 1.9},\r\n      {x: 375, y: 1.5},\r\n      {x: 400, y: 1.1},\r\n      {x: 425, y: 0.7},\r\n      {x: 450, y: 0.35},\r\n      {x: 475, y: 0.2},\r\n      {x: 500, y: 0.1},\r\n      {x: 525, y: 0.11},\r\n      {x: 550, y: 0.111},\r\n      {x: 1000, y: 0},\r\n    ];\r\nconst Statistics = (props)=> {\r\n  const number = []\r\n    for (let i = 0; i <=1000; i++) {\r\n      if (i%50 === 0) {\r\n          number.push(i)\r\n      }\r\n    }\r\n    return (\r\n      <div style={{height:'350px',maxWidth:'500px', width: '100%'}} className='m-2'>\r\n        <FlexibleWidthXYPlot height={350}\r\n        className='col-sm-5 flex-fill shadow rounded bg-dark'\r\n        >\r\n        <XAxis \r\n          tickFormat={v => `${v}ms` }\r\n          tickLabelAngle={-45}\r\n          position={'middle'}\r\n          hideLine\r\n          tickValues={number}\r\n        />\r\n        {/* <XAxis \r\n        style={{'maxWidth':'500px'}}\r\n        style={{\r\n          fontSize: 12,\r\n          stroke: 'white'\r\n        }}\r\n        tickFormat={v => `${v}ms` }\r\n          top={325}\r\n          hideLine\r\n          tickValues={props.result.result.test}\r\n        /> */}\r\n          <LineSeries data={data} curve=\"curveNatural\" color='#62aeec'/>\r\n        </FlexibleWidthXYPlot>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Statistics;","import Statistics from \"./Statistics\";\r\n\r\nexport default function AboutTest(props:any) {\r\n   \r\n   return (\r\n      \r\n      <section className='d-flex flex-wrap justify-content-around mt-2'>\r\n         <Statistics result={props}/>\r\n         <div  className='col-sm-5 flex-fill p-3 shadow rounded bg-dark m-2'>\r\n            <h2>About the test</h2>\r\n            <p>This is a simple tool to measure your reaction time.</p>\r\n            <p>The average (median) reaction time is 273 milliseconds, according to the data collected so far.</p>\r\n            <p>In addition to measuring your reaction time, this test is affected by the latency of your computer and monitor. Using a fast computer and low latency / high framerate monitor will improve your score.\r\n            </p>\r\n            <p>Scores in this test are faster than the aim trainer test, because you can react instantly without moving the cursor.\r\n            </p>\r\n            <p>This is discused in further detail on the the statistics page. While an average human reaction time may fall between 200-250ms, your computer could be adding 10-50ms on top. Some modern TVs add as much as 150ms!\r\n            </p>\r\n            <p>If you want, you can keep track of your scores, and see your full history of reaction times.\r\n            </p>\r\n            <p>Just perform at least 3 clicks and then save.\r\n            </p>\r\n         </div>\r\n      </section>\r\n   )\r\n};\r\n","import React from 'react'\r\nimport { convertTime } from '../selectors';\r\ntype ownProps ={\r\n   name: string & any\r\n   result: {\r\n     results: string[]\r\n   }\r\n}\r\nexport const Results:React.FC<ownProps> = ({result,name, ...props}) => {\r\n   return (\r\n      <aside className='col-lg-3' style={{minWidth: '180px'}}>\r\n         <div className='m-2 p-2 bg-dark'>\r\n            <h3>Reaction Time</h3>\r\n            <table className='table table-dark table-striped'>\r\n               <tbody>\r\n                  {\r\n                     result.results.map((e,index)=>{ \r\n                     const res = convertTime(e)\r\n                     return(\r\n                        <tr  key={index}>\r\n                           <td>Reaction Time</td>\r\n                           <td><b>{res}</b></td>\r\n                        </tr>\r\n                     )\r\n                     })\r\n                  }\r\n               </tbody>\r\n               \r\n            </table>\r\n         </div>\r\n      </aside>\r\n   )\r\n};\r\n","\r\nimport React, { useState } from 'react'\r\nimport {  withCookies } from 'react-cookie';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { startGame,stopGame,setName,resetGame,saveScore} from '../reducers/gameReducer';\r\nimport { RootState } from '../reducers/store';\r\nimport { convertTime, getMinResults } from '../selectors';\r\nimport AboutTest from './AboutTest';\r\nimport { Results } from './Results';\r\n\r\n\r\nconst Game:React.FC<PropsFromRedux> = React.memo(({isStarted,result,startGame,stopGame,\r\n  getBestResult, resetGame,step,setName,name,info,background,saveScore,...props}): JSX.Element=> {\r\n   \r\n   const [count, setCount] = useState<number>(0)\r\n\r\n   const Start =()=> {\r\n      setCount(count+1)\r\n      stopGame()\r\n   }\r\n   const Reset =()=> {\r\n      setCount(0)\r\n      resetGame()\r\n   }\r\n\r\n   const currentResult = convertTime(result.currentResult)\r\n   const bestResult = convertTime(getBestResult)\r\n\r\n   return(\r\n      <>\r\n         <section className='d-flex flex-wrap' >\r\n            <div className='col-lg-9 game'>\r\n               {\r\n               isStarted ?\r\n                  <div  className={`game__wrapp ${background}`} onClick={Start}>\r\n                        {background === 'stoped' ? \r\n                           <div>\r\n                           <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"ellipsis-h\" className=\"svg-inline--fa fa-ellipsis-h fa-w-8 \" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z\"></path></svg>\r\n                           <p>Wait for green</p>\r\n                           </div>\r\n                           :\r\n                           <div>\r\n                              <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"ellipsis-h\" className=\"svg-inline--fa fa-ellipsis-h fa-w-8 \" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z\"></path></svg>\r\n                              <p>Click!</p>\r\n                           </div>\r\n                        }\r\n                  </div>\r\n                  :\r\n                  <div className='card p-3 bg-dark'>\r\n                     {\r\n                     info.showMessage && \r\n                        <h2 className='card-title'>\r\n                           {info.message}\r\n                        </h2>\r\n                     }\r\n                     {\r\n                     step === 0 && \r\n                        <>\r\n                        {count === 0 && <h2 className='card-title'>Reaction Time Test</h2>}\r\n                           \r\n                           <h6 className='p-2'>When the red box turns green, click as quickly as you can.</h6>\r\n                     </> \r\n                     }\r\n                     {\r\n                     (result.showResult) && \r\n                        <div className='card-header'>\r\n                           <p className='card-title'>\r\n                              {\r\n                              (result.results.length === 3 ) ?\r\n                              `Your best Speed: ${bestResult}`\r\n                              :\r\n                              `Your Speed: ${currentResult}`\r\n                              }\r\n                           </p>\r\n                        </div>\r\n                     }\r\n                     <div className='card-Startter'>\r\n                        {\r\n                           (result.results.length === 3) ? \r\n                           <div>\r\n                              <button className='btn btn-light m-2' onClick={Reset}>Reset game</button>\r\n                              <div className='input-group p-2'>\r\n                                 <input className='form-control'  type='text' placeholder='Enter Your Name' name='name' value={name} onChange={(e)=>setName(e.target.value)}></input>\r\n                                 <div className='input-group-prepend'>\r\n                                    <button onClick={saveScore} className='btn btn-light'>Save score</button>\r\n                                 </div>\r\n                                 \r\n                              </div>\r\n                           </div>\r\n                           :<button className='btn btn-light'\r\n                              onClick={()=>startGame()}>\r\n                              {step>=1 ? `Click to try again.` : `Click Here To Start Playing`}\r\n                           </button>\r\n                        }\r\n                     </div>\r\n                  </div>\r\n               }\r\n            </div>\r\n            <Results result={result} name={name} />\r\n         </section>\r\n         <AboutTest result={result}/>\r\n      </>\r\n   )\r\n})\r\n\r\n\r\nfunction mapState  (state: RootState){\r\n   return {\r\n      isStarted: state.gameReducer.started,\r\n      info: state.gameReducer.info,\r\n      step: state.gameReducer.step,\r\n      result: state.gameReducer.result,\r\n      getBestResult: getMinResults(state),\r\n      name: state.gameReducer.name,\r\n      background: state.gameReducer.background\r\n   }\r\n} \r\n\r\nconst connector = connect(mapState,{startGame,stopGame,setName,resetGame,saveScore})\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\n\r\nexport default withCookies(connector(Game));\r\n"," import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nconst Header = (props: any) => {\r\n   return(\r\n      <header className='header '>\r\n         <nav className='navbar-dark bg-dark shadow rounded '>\r\n            <div className='navbar-nav'>\r\n               <ul className='nav'>\r\n                  <NavLink to='/bestResult' activeClassName='active' className='p-3 nav-link'>Best Results</NavLink>\r\n                  <NavLink to='/' activeClassName='active' className='p-3 nav-link'>Game</NavLink>\r\n               </ul>\r\n            </div>\r\n         </nav>\r\n      </header>\r\n   )\r\n};\r\nexport default Header\r\n","import React from \"react\"\r\nimport { convertTime } from \"../selectors\"\r\n\r\n\r\nfunction BestResult(props:any) {\r\n   let items = {...localStorage}\r\n   return (\r\n      <table className='table table-dark table-striped'>\r\n         <thead>\r\n            <tr>\r\n               <th scope=\"col\">#</th>\r\n               <th scope=\"col\">Name</th>\r\n               <th scope=\"col\">Result</th>\r\n            </tr>\r\n         </thead>\r\n         <tbody>\r\n         {\r\n         Object.entries(items).map(([name, val]:any, index) => {\r\n            let convertVal =  convertTime(val)\r\n            return(\r\n               <tr key={index}>\r\n                  <th scope='row' >{index+1}</th>\r\n                  <td>{name}</td>\r\n                  <td>{convertVal}</td>\r\n               </tr>\r\n            )\r\n         })}\r\n         </tbody>\r\n      </table>\r\n   )\r\n}\r\n\r\nexport default BestResult","export default function Footer(props:any) {\r\n   return (\r\n      <footer className=''>\r\n         <div className=\"card-body text-end\">\r\n            <p className='card-text'>Copyright 2021 Serhii Riznyk</p>\r\n            <p className='card-text'><a href=\"mailto:riznyk.serhii.v@gmail.com\">riznyk.serhii.v@gmail.com</a></p>\r\n         </div>\r\n      </footer>\r\n   )\r\n};\r\n","import React from 'react';\r\nimport { Route, BrowserRouter as Router, Switch, Redirect } from 'react-router-dom';\r\nimport Game from './components/Game';\r\nimport Header from './components/Header';\r\nimport BestResult from './components/BestResult';\r\nimport Footer from './components/Footer';\r\n\r\nfunction App(props:any) {\r\n\r\n  return (\r\n    <Router>\r\n        <Header />\r\n          <main className='text-light'>\r\n            <Switch>\r\n              <Route exact path=\"/\"  component={Game} />\r\n              <Route path=\"/bestresult\" component={BestResult} />\r\n            </Switch>\r\n          </main>\r\n        <Footer/>\r\n      </Router>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { applyMiddleware, combineReducers,   compose,   createStore } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport gameReducer from \"./gameReducer\"\r\n\r\nconst reducers = combineReducers({\r\n   gameReducer\r\n})\r\n// const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\r\n//     (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\nexport const store = createStore(reducers, compose(applyMiddleware(thunk)))\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux'\r\nimport   {store }  from './reducers/store';\r\n\r\nimport { CookiesProvider } from 'react-cookie';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n    <CookiesProvider>\r\n        <App/>\r\n    </CookiesProvider>\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}